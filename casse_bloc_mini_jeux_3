#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Nov 24 16:46:32 2021

@author: matthis
"""

import pygame
from pygame.locals import *

pygame.init()

screen_largeur = 600
screen_hauteur = 600

screen = pygame.display.set_mode((screen_largeur, screen_hauteur))
pygame.display.set_caption('casse bloc')

#define font
font = pygame.font.SysFont('Constantia', 30)

#define colours
bg = (144, 201, 120)
#block colours
block_rouge = (200, 50, 76)
block_vert = (67, 134, 57)
block_bleu = (90, 150, 160)
#paddle colours
paddle_colonne = (142, 135, 123)
paddle_contour = (100, 100, 100)
#text colour
text_col = (78, 81, 139)

#ddefinition des variable du jeux 
colonne = 6
rows = 6
clock = pygame.time.Clock()
fps = 60
vie_balle = False
game_over = 0


#fonction qui cree le texte sur le jeu
def draw_text(text, font, text_col, x, y):
	img = font.render(text, True, text_col)
	screen.blit(img, (x, y))

#class des briques qui sont detruite
class mur():
	def __init__(self):
		self.width = screen_largeur // colonne
		self.height = 50

	def create_mur(self):
		self.blocks = []
        # liste vide pour un bloc individuel

		block_individual = []
		for rang in range(rows):
			#réinitialiser la liste des lignes de blocs
			bloc_rang = []
			#creer pour chaque colonne de cette ligne
			for col in range(colonne):
				#générer des positions x et y pour chaque bloc et créer le rectangle du bloc 
				bloc_x = col * self.width
				bloc_y = rang * self.height
				rect = pygame.Rect(bloc_x, bloc_y, self.width, self.height)
				#attribuer la force en fonction de la ligne du bloc 
				if rang < 2:
					force = 3
				elif rang < 4:
					force = 2
				elif rang < 6:
					force = 1
				#créer une liste pour stocker les données de rect et de couleur
				block_individual = [rect, force]
				#ajoute ce bloc à la ligne du bloc
				bloc_rang.append(block_individual)
			#ajouter la ligne à la liste des blocs
			self.blocks.append(bloc_rang)


	def draw_mur(self):# dessine les bloque 
		for rang in self.blocks:
			for block in rang:
				#attribuer une couleur en fonction de la force du bloc
				if block[1] == 3:
					block_col = block_bleu
				elif block[1] == 2:
					block_col = block_vert
				elif block[1] == 1:
					block_col = block_rouge
				pygame.draw.rect(screen, block_col, block[0])
				pygame.draw.rect(screen, bg, (block[0]), 2)

# class du paddle
class paddle():
	def __init__(self):
		self.reset()


	def move(self):
		#réinitialisation de la direction du mouvement
		self.direction = 0
		key = pygame.key.get_pressed()
		if key[pygame.K_LEFT] and self.rect.left > 0:# va a doite quand la fleche de droite est actionner 
			self.rect.x -= self.speed
			self.direction = -1
		if key[pygame.K_RIGHT] and self.rect.right < screen_largeur:#va a gauche quand la fleche de gauche est actionner 
			self.rect.x += self.speed
			self.direction = 1

	def draw(self):# dessine le paddle 
		pygame.draw.rect(screen, paddle_colonne, self.rect)
		pygame.draw.rect(screen, paddle_contour, self.rect, 3)


	def reset(self):# remet a zero toute la classe
		#definition des variable du paddle 
		self.height = 20
		self.width = int(screen_largeur / colonne)
		self.x = int((screen_largeur / 2) - (self.width / 2))
		self.y = screen_hauteur - (self.height * 2)
		self.speed = 10
		self.rect = Rect(self.x, self.y, self.width, self.height)
		self.direction = 0

# class de la balle 
class balle():
	def __init__(self, x, y):
		self.reset(x, y)


	def move(self):

		#collision threshold
		collision = 5

		#lorsque le mur a été complètement détruit
		mur_destroyed = 1
		compteur_rang = 0
		for rang in mur.blocks:
			compteur_item = 0
			for item in rang:
				#check collision
				if self.rect.colliderect(item[0]):
					#vérifier si la collision vient d’en haut
					if abs(self.rect.bottom - item[0].top) < collision and self.speed_y > 0:
						self.speed_y *= -1
					#vérifier si la collision vient d’en en bas 
					if abs(self.rect.top - item[0].bottom) < collision and self.speed_y < 0:
						self.speed_y *= -1						
					#vérifier si la collision vient de la droite
					if abs(self.rect.right - item[0].left) < collision and self.speed_x > 0:
						self.speed_x *= -1
					#vérifier si la collision vient de la gauche 
					if abs(self.rect.left - item[0].right) < collision and self.speed_x < 0:
						self.speed_x *= -1
					#réduire la force du bloc en lui infligeant des dommages
					if mur.blocks[compteur_rang][compteur_item][1] > 1:
						mur.blocks[compteur_rang][compteur_item][1] -= 1
					else:
						mur.blocks[compteur_rang][compteur_item][0] = (0, 0, 0, 0)

				#vérifier si le bloc existe toujours
				if mur.blocks[compteur_rang][compteur_item][0] != (0, 0, 0, 0):
					mur_destroyed = 0
				#augmente le nombre d'item dans un compteur 
				compteur_item += 1
			#augmenter le compteur de lignes
			compteur_rang += 1
		#verifie si le mur est detruit 
		if mur_destroyed == 1:
			self.game_over = 1



		##vérifier la collision avec les murs
		if self.rect.left < 0 or self.rect.right > screen_largeur:
			self.speed_x *= -1

		#verifie si la balle ne sort pas de l'écran de jeux 
		if self.rect.top < 0:
			self.speed_y *= -1
		if self.rect.bottom > screen_hauteur:
			self.game_over = -1


		# regarde la collision avec le paddle 
		if self.rect.colliderect(player_paddle):
			#verifie la collsion avec le haut 
			if abs(self.rect.bottom - player_paddle.rect.top) < collision and self.speed_y > 0:
				self.speed_y *= -1
				self.speed_x += player_paddle.direction
				if self.speed_x > self.speed_max:
					self.speed_x = self.speed_max
				elif self.speed_x < 0 and self.speed_x < -self.speed_max:
					self.speed_x = -self.speed_max
			else:
				self.speed_x *= -1



		self.rect.x += self.speed_x
		self.rect.y += self.speed_y

		return self.game_over


	def draw(self): # dessine la balle
		pygame.draw.circle(screen, paddle_colonne, (self.rect.x + self.ball_rad, self.rect.y + self.ball_rad), self.ball_rad)
		pygame.draw.circle(screen, paddle_contour, (self.rect.x + self.ball_rad, self.rect.y + self.ball_rad), self.ball_rad, 3)



	def reset(self, x, y): # reset la balle, remet tout a zero
		self.ball_rad = 10
		self.x = x - self.ball_rad
		self.y = y
		self.rect = Rect(self.x, self.y, self.ball_rad * 2, self.ball_rad * 2)
		self.speed_x = 4
		self.speed_y = -4
		self.speed_max = 5
		self.game_over = 0

#creation des mur
mur = mur()
mur.create_mur()

#creation dui paddle 
player_paddle = paddle()

#creation de la balle 
balle = balle(player_paddle.x + (player_paddle.width // 2), player_paddle.y - player_paddle.height)

def main():

    global vie_balle, game_over
    
    run = True
    while run:
    
    	clock.tick(fps)
    	
    	screen.fill(bg)
    
    	#dessine tout
    	mur.draw_mur()
    	player_paddle.draw()
    	balle.draw()
    
    	if vie_balle:
    		#dessine le paddle 
    		player_paddle.move()
    		# dessine la balle 
    		game_over = balle.move()
    		if game_over != 0:
    			vie_balle = False
    
    
    	# montre les instructnion du joueur 
    	if not vie_balle:
    		if game_over == 0:
    			draw_text('CLIQUE SUR LECRAN POUR COMMENCER', font, text_col, 0, 500 // 2 + 100 )
    		elif game_over == 1:
    			draw_text('TU A GAGNE!', font, text_col, 240, screen_hauteur // 2 + 50)
    			draw_text('CLIQUE SUR L ECRAN POUR COMMENCER', font, text_col, 0, 500 // 2 + 100 )
    		elif game_over == -1:
    			draw_text('TU AS PERDU!', font, text_col, 240, screen_hauteur // 2 + 50)
    			draw_text('CLIQUE SUR L ECRAN POUR COMMENCER', font, text_col, 0, 500 // 2 + 100 )
    
    
    	for event in pygame.event.get():
    		if event.type == pygame.QUIT:
    			run = False
    		if event.type == pygame.MOUSEBUTTONDOWN and vie_balle == False:
    			vie_balle = True
    			balle.reset(player_paddle.x + (player_paddle.width // 2), player_paddle.y - player_paddle.height)
    			player_paddle.reset()
    			mur.create_mur()
    
    	pygame.display.update()
    
    pygame.quit()

main()
